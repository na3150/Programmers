#include <vector>
#include <queue>
using namespace std;

vector<pair<int, int>> map[55];
vector<int> Dist;

void dijkstra(int N)
{
    priority_queue<pair<int, int>> PQ;
    PQ.push({ 0, 1 });
    Dist[1] = 0; ///시작 노드

    while (!PQ.empty())
    {
        int Cost = -PQ.top().first;
        int Cur = PQ.top().second;
        PQ.pop();

        for (int i = 0; i < map[Cur].size(); i++)
        {
            int Next = map[Cur][i].first;
            int nCost = map[Cur][i].second;

            if (Dist[Next] > Cost + nCost)
            {
                Dist[Next] = Cost + nCost;
                PQ.push({ -Dist[Next], Next });
            }
        }
    }
}

int solution(int N, vector<vector<int> > road, int K)
{
    Dist.resize(N + 1, 2e9); //큰 값으로 채워놓기
    for (int i = 0; i < road.size(); i++)
    {
        int a = road[i][0];
        int b = road[i][1];
        int dist = road[i][2]; //걸리는 시간

        map[a].push_back({ b, dist });
        map[b].push_back({ a, dist });
    }
    dijkstra(N);
    int answer = 0;
    for (int i = 1; i <= N; i++)
        if (Dist[i] <= K) answer++;
    return answer;
}
