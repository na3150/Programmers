#include <string>
#include <vector>
#include <unordered_map>
using namespace std;
vector<string>possible; //가능한 조합 index들을 문자열로 저장
int used[8];
unordered_map<string,int>Tuple;

void dfs(string str, int limit, int start, vector<vector<string>>relation)
{
    if (str.length() == limit) {
        possible.push_back(str);
        return;
    }
    for (int i = start; i < relation[0].size(); i++)
    {
        if (used[i]) continue;
        used[i] = 1;
        dfs(str + to_string(i), limit, i, relation);
        used[i] = 0;
    }
}

bool checkUsed(string str)//최소성검사
{
    for (int i = 0; i < str.size(); i++)
    {
        string ret = str;
        if (Tuple.count(ret.erase(i, 1)) > 0) return 1;
    }
    return 0;
}

bool check(vector <vector<string>>relation, string str)
{
    unordered_map<string, int>h;
    for (int i = 0; i < relation.size(); i++)
    {
        string result = "";
        for (int j = 0; j < str.length(); j++)
        {
            result += "_"+ relation[i][str[j] - '0'];
        }
        h[result]++;
        if (h[result] > 1) return 0;
    }
    Tuple[str] = 1;
    return 1;
}

int solution(vector<vector<string>> relation) {
    int cnt = 0;
    for (int i = 1; i < relation[0].size()+1; i++) //가능한 조합들을 저장
        dfs("", i, 0, relation);
    for (int i = 0; i < possible.size(); i++)
    {
        if (check(relation, possible[i]) && !checkUsed(possible[i])) cnt++;
    }
    return cnt;
}
